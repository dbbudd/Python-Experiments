#!/usr/bin/env python

'''
Checking whether a click event is within a polygon or any other artist
is a very common pattern.  For this reason, matplotlib provides a built-in
pick event.  You can think of this as an event similar to a mouse click, but
specifically generated by a plot artist when it is clicked.  Further, a pick
event is associated back to that particular plot element, which can be easily
referenced within the callback.  
'''
import numpy as np
import matplotlib.pyplot as plt

fig = plt.figure()
ax = fig.add_subplot(111, xlim=(-1, 2), ylim = (-1, 2))
polygon = plt.Polygon([[0,0], [1,0], [1,1], [0,1], [0,0]])
ax.add_patch(polygon)

# set the picker to True, so that pick events are registered
polygon.set_picker(True)

# create a function to be bound to pick events: here the event has an
# attribute 'artist' which points to the object which was clicked
def on_pick(event):
    event.artist.set_facecolor(np.random.random(3))
    fig.canvas.draw()

# bind pick events to our on_pick function
fig.canvas.mpl_connect('pick_event', on_pick)
plt.show()